from aiogram import executor
from handlers import dp
from other.bd_cfg import create_bdx
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import configparser
import datetime
import sqlite3
import re
from kb import *
from loader import dp, bot
from aiogram import types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from random import randint
from other.config import admin_channel_id
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from other.bd_cfg import *
import datetime
from handlers.user_main import *



config = configparser.ConfigParser()
config.read('config.ini')
logging.basicConfig(level=logging.INFO)
bot = Bot(token=config['settings']['token'])
dp = Dispatcher(bot)
admin_id = int(config['settings']['admin_id'])

conn = sqlite3.connect('data.db')
cur = conn.cursor()
cur.execute("""CREATE TABLE IF NOT EXISTS users(
   tg_id INT,
   first_name TEXT,
   data TEXT,
   balance INT,
   UNIQUE ("tg_id") ON CONFLICT IGNORE
   );
""")
cur.execute("""CREATE TABLE IF NOT EXISTS application(
   tg_id INT,
   first_name TEXT,
   data TEXT,
   type TEXT,
   os TEXT, 
   admin TEXT,
   tz TEXT,
   dop TEXT,
   price INT,
   status TEXT,
   UNIQUE ("tg_id") ON CONFLICT IGNORE
   );
""")
cur.execute("""CREATE TABLE IF NOT EXISTS dostup(
   price INT,
   application INT,
   bot INT
   );
""")

# dostup = (1, 1, 1)
# cur.execute('INSERT INTO dostup VALUES(?, ?, ?)', dostup)
# conn.commit()


conn.commit()
@dp.message_handler(commands=("start"))
async def cmd_start(message: types.Message):
	if message.chat.id==admin_id:
		hello_keyboard_adm = types.ReplyKeyboardMarkup(resize_keyboard=True)
		button_1 = types.KeyboardButton(text="‚õìÔ∏è–î–æ—Å—Ç—É–ø")
		button_2 = types.KeyboardButton(text="ü•∑–ó–∞—è–≤–∫–∏")
		button_3 = types.KeyboardButton(text="üìú–ó–∞–∫–∞–∑—ã")
		button_4 = types.KeyboardButton(text="‚ûï–î–æ–ø. –º–µ–Ω—é")
		hello_keyboard_adm.add(button_1, button_2, button_3)
		hello_keyboard_adm.add(button_4)
		await bot.send_message(message.from_user.id, "—Ç–µ–∫—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∞", reply_markup=hello_keyboard_adm)
	else:
		time = datetime.datetime.now()
		name = message.from_user.username
		user_list = (message.from_user.id, name, time, 0)
		cur.execute('INSERT INTO users VALUES(?, ?, ?, ?)', user_list)
		conn.commit()
		hello_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
		button_1 = types.KeyboardButton(text="üìú–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑")
		button_2 = types.KeyboardButton(text="ü•∑–ó–∞—è–≤–∫–∞ –≤ —Ç–∏–º—É")
		hello_keyboard.add(button_1, button_2)
		await bot.send_message(message.from_user.id, "„Åì„Çì„Å´„Å°„ÅØ‚úã\n–Ø –ø–æ–º–æ—â–Ω–∏–∫ @lll10010010\n–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ‚Üì", reply_markup=hello_keyboard)
		await bot.send_message(message.from_user.id, "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–∞:", reply_markup=profile)

@dp.message_handler(lambda message: message.text == "üìú–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑") 
async def without_puree(message: types.Message):
	dostup = """SELECT price from dostup"""
	cur.execute(dostup)
	records = str(cur.fetchall())
	dostup = records.replace('(', '').replace(')', '').replace(',', '').replace('[', '').replace(']', '')
	if dostup == "1":
		await bot.send_message(message.from_user.id, "üí≠–û—Ç–≤–µ—Ç–∏–≤ –Ω–∞ –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å–æ–≤ —è –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ç–∑\n‚ùó–ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ —è –º–æ–≥—É –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –≤–∞—à–µ —Ç–∑, –ù–ï –û–ë–™–Ø–°–ù–Ø–Ø –ü–†–ò–ß–ò–ù–´\nüïë–û—Ç–≤–µ—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ –±–æ—Ç–∞ –≤ —Ç–µ—á–µ–Ω–∏–∏ 24—á–∞—Å–æ–≤\n‚Äçüíº–ï—Å–ª–∏ –≤—ã —Ç–∞–∫ –∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –æ—Ç–≤–µ—Ç —Ç–æ –ø–∏—à–∏—Ç–µ –ø–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º", reply_markup=start)
	if dostup == "0":
		await bot.send_message(message.from_user.id, "–°–µ–π—á–∞—Å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

# @dp.message_handler(lambda message: message.text == "ü•∑–ó–∞—è–≤–∫–∞ –≤ —Ç–∏–º—É")
# async def without_puree(message: types.Message):
# 	dostup = """SELECT application from dostup"""
# 	cur.execute(dostup)
# 	records = str(cur.fetchall())
# 	dostup = records.replace('(', '').replace(')', '').replace(',', '').replace('[', '').replace(']', '')
# 	if dostup == "1":
# 		await bot.send_message(message.from_user.id, "–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ç–∏–º—ã")
# 	elif dostup == "0": 
# 		await bot.send_message(message.from_user.id, "–°–µ–π—á–∞—Å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–∫—Ä—ã—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

@dp.message_handler(lambda message: message.text == "‚õìÔ∏è–î–æ—Å—Ç—É–ø")
async def without_puree(message: types.Message):
	await bot.send_message(message.from_user.id, f"üö™–£—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞:", reply_markup=dostup)#–ù–∞–¥–æ –¥–æ–¥–µ–ª–∞—Ç—å


#–∫–æ–ª–ª–±—ç–∫
@dp.callback_query_handler()
async def call_handler(call: types.CallbackQuery):
	if call.data == 'profile':
		data2 = str(cur.execute(f"SELECT data FROM users WHERE  tg_id ={call.from_user.id}").fetchone())
		data2 = data2.replace('(', '').replace(')', '').replace(',', '').replace("'", '').split('.')[0]
		user_profile = await bot.send_message(call.from_user.id, f"ü•∑ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å, @{call.from_user.username}\n\n‚ÑπÔ∏èTelegram ID: {call.from_user.id}\nüíÅ‚Äç‚ôÇÔ∏è–ò–º—è: @{call.from_user.username}\n‚åöÔ∏è–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {data2}\n", reply_markup=close)
	if call.data == 'close':
		await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
	if call.data == 'start':
		time = datetime.datetime.now()
		user_list = (call.from_user.id, call.from_user.username, time, 0, 0, 0, 0, 0, 0, 0)
		cur.execute('INSERT INTO application VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?)', user_list)
		conn.commit()
		await bot.send_message(call.from_user.id, "–°–Ω–∞—á–∞–ª–∞ –¥–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å —Ç–∏–ø–æ–º —Ä–∞–±–æ—Ç—ã", reply_markup=work)
#–¢–ò–ü –†–ê–ë–û–¢–´
	if call.data == 'tg-bot':
		await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
		type_tg_bot = f"""Update application set type = "tg-bot" where tg_id = {call.from_user.id}"""
		cur.execute(type_tg_bot)
		conn.commit()
		msg_types = await bot.send_message(call.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ telegram-–±–æ—Ç\n–î–∞–ª—å—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è c –û–°\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É", reply_markup=os)
	if call.data == 'vk-bot':
		await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
		type_vk_bot = f"""Update application set type = "vk-bot" where tg_id = {call.from_user.id}"""
		cur.execute(type_vk_bot)
		conn.commit()
		msg_types = await bot.send_message(call.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ VK-–±–æ—Ç\n–î–∞–ª—å—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è c –û–°\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É", reply_markup=os)
	if call.data == 'ds-bot':
		await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
		type_ds_bot = f"""Update application set type = "Discord-–±–æ—Ç" where tg_id = {call.from_user.id}"""
		cur.execute(type_ds_bot)
		conn.commit()
		msg_types = await bot.send_message(call.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ Discord-–±–æ—Ç\n–î–∞–ª—å—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è c –û–°\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É", reply_markup=os)
	if call.data == 'parser':
		await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
		type_parser = f"""Update application set type = "–ü–∞—Ä—Å–µ—Ä" where tg_id = {call.from_user.id}"""
		cur.execute(type_parser)
		conn.commit()
		msg_types = await bot.send_message(call.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–∞—Ä—Å–µ—Ä\n–î–∞–ª—å—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è c –û–°\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É", reply_markup=os)
	if call.data == 'script':
		await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
		type_script = f"""Update application set type = "–°–∫—Ä–∏–ø—Ç" where tg_id = {call.from_user.id}"""
		cur.execute(type_script)
		conn.commit()
		msg_types = await bot.send_message(call.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∫—Ä–∏–ø—Ç\n–î–∞–ª—å—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è c –û–°\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É", reply_markup=os)
	if call.data == 'web':
		await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
		type_web = f"""Update application set type = "WEB" where tg_id = {call.from_user.id}"""
		cur.execute(type_web)
		conn.commit()
		await bot.send_message(call.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ WEB\n–î–∞–ª—å—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è c –û–°\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É", reply_markup=os)
#–î–æ—Å—Ç—É–ø
	if call.data == 'dostup_tim':
		dostup = """SELECT application from dostup"""
		cur.execute(dostup)
		records = str(cur.fetchall())
		dostup = records.replace('(', '').replace(')', '').replace(',', '').replace('[', '').replace(']', '')
		if dostup == "1":
			cur.execute("""Update dostup set application = "0" """)
			conn.commit()
			await bot.send_message(call.from_user.id, "‚ùå–î–æ—Å—Ç—É–ø –∫ —Ç–∏–º–µ –∑–∞–∫—Ä—ã—Ç", reply_markup=close)
		elif dostup == "0":
			cur.execute("""Update dostup set application = "1" """)
			await bot.send_message(call.from_user.id, "‚úÖ–î–æ—Å—Ç—É–ø –∫ —Ç–∏–º–µ –æ—Ç–∫—Ä—ã—Ç", reply_markup=close)
	if call.data == 'dostup_zakaz':
		dostup = """SELECT price from dostup"""
		cur.execute(dostup)
		records = str(cur.fetchall())
		dostup = records.replace('(', '').replace(')', '').replace(',', '').replace('[', '').replace(']', '')
		if dostup == "1":
			cur.execute("""Update dostup set price = "0" """)
			await bot.send_message(call.from_user.id, "‚ùå–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫–∞–∑–∞–º –∑–∞–∫—Ä—ã—Ç", reply_markup=close)
		elif dostup == "0":
			cur.execute("""Update dostup set price = "1" """)
			await bot.send_message(call.from_user.id, "‚úÖ–î–æ—Å—Ç—É–ø –∫ –∑–∞–∫–∞–∑–∞–º –æ—Ç–∫—Ä—ã—Ç", reply_markup=close)
#OS
	if call.data == 'win':
		await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
		os_windows = f"""Update application set os = "windows" where tg_id = {call.from_user.id}"""
		cur.execute(os_windows)
		conn.commit()
		await bot.send_message(call.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ Windows\n–î–∞–ª—å—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=admin_panel)
	if call.data == 'mac':
		await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
		os_macos = f"""Update application set os = "macOs" where tg_id = {call.from_user.id}"""
		cur.execute(os_macos)
		conn.commit()
		await bot.send_message(call.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ MacOs\n–î–∞–ª—å—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=admin_panel)
	if call.data == 'lin':
		await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
		os_linux = f"""Update application set os = "Linux" where tg_id = {call.from_user.id}"""
		cur.execute(os_linux)
		conn.commit()
		await bot.send_message(call.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ Linux\n–î–∞–ª—å—à–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è —Å –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å—é\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç", reply_markup=admin_panel)
#–¢–ó
	if call.data == 'web_admin':
		await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
		web_admin = f"""Update application set admin = "WEB_admin" where tg_id = {call.from_user.id}"""
		cur.execute(web_admin)
		conn.commit()
		await bot.send_message(call.from_user.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ Web-–ê–¥–º–∏–Ω–∫—É\n–î–∞–ª—å—à–µ –º–Ω–µ –Ω—É–∂–Ω–æ –≤–∞—à–µ —Ç–∑(–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ)\n–ù–∞–ø–∏—à–∏—Ç–µ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤–∞—à–µ —Ç–∑")
		@dp.message_handler()
		async def echo_message(msg: types.Message):
			tz = str(msg.text)
			tz = f"""Update application set tz = {tz} where tg_id = {call.from_user.id}"""
			await bot.send_message(msg.from_user.id, "–•–æ—Ä–æ—à–æ, —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É:")
			@dp.message_handler()
			async def echo_message(msg: types.Message):
				price = f"""Update application set price = {msg.text} where tg_id = {call.from_user.id}"""


if __name__ == "__main__":
    create_bdx()
    executor.start_polling(dp)
